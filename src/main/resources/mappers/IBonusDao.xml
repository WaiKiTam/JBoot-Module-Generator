<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.jboot.generator.dao.IBonusDao">

    <!--基础字段返回信息配置 -->
    <resultMap id="BaseResultMap" type="org.jboot.generator.entity.BonusVO">
        <id column="ename" jdbcType="VARCHAR" property="ename" />
        <result column="job" jdbcType="VARCHAR" property="job" />
        <result column="sal" jdbcType="DECIMAL" property="sal" />
        <result column="comm" jdbcType="DECIMAL" property="comm" />
    </resultMap>

    <!--基础字段信息配置 -->
    <sql id="Base_Column_List">
        t.`ename`,t.`job`,t.`sal`,t.`comm`
    </sql>

    <!--基础条件查询配置 -->
    <sql id="Base_Where_Clause">
        <where>
            <if test="entity.ename != null">
                and t.`ename` = #{entity.ename,jdbcType=VARCHAR}
            </if>
            <if test="entity.job != null">
                and t.`job` = #{entity.job,jdbcType=VARCHAR}
            </if>
            <if test="entity.sal != null">
                and t.`sal` = #{entity.sal,jdbcType=DECIMAL}
            </if>
            <if test="entity.comm != null">
                and t.`comm` = #{entity.comm,jdbcType=DECIMAL}
            </if>
        </where>
    </sql>

    <!--构造条件 -->
    <sql id="Wrapper_Where_Clause">
        <where>
            <foreach collection="wp.criterias" item="criteria" separator="or">
                <trim prefix="(" prefixOverrides="and" suffix=")">
                    <foreach collection="criteria.criterions" item="criterion">
                         <include refid="Wrapper_Where_Op_Clause"></include>
                    </foreach>
                </trim>
            </foreach>
        </where>
    </sql>

    <!--构造操作条件 -->
    <sql id="Wrapper_Where_Op_Clause">
        <choose>
            <when test="criterion.op.type == 'like' or criterion.op.type == 'notLike'">
                <choose>
                    <when test="criterion.attr == 'ename'">
                        and LOWER(t.`ename`)
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'job'">
                        and LOWER(t.`job`)
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'sal'">
                        and LOWER(t.`sal`)
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'comm'">
                        and LOWER(t.`comm`)
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <otherwise>
                        and false
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <choose>
                    <when test="criterion.attr == 'ename'">
                        and t.`ename`
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'job'">
                        and t.`job`
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'sal'">
                        and t.`sal`
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'comm'">
                        and t.`comm`
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <otherwise>
                        and false
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </sql>

    <!--查询操作构造器 -->
    <sql id="Wrapper_Op_Clause">
        <choose>
            <when test="criterion.op.type == 'eq'">
                = #{criterion.value}
            </when>
            <when test="criterion.op.type == 'ne'">
                != #{criterion.value}
            </when>
            <when test="criterion.op.type == 'gt'">
                <![CDATA[ > #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'ge'">
                <![CDATA[ >= #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'lt'">
                <![CDATA[ < #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'le'">
                <![CDATA[ <= #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'like'">
                <![CDATA[ LIKE CONCAT('%',LOWER(#{criterion.value}),'%')]]>
            </when>
            <when test="criterion.op.type == 'notLike'">
                <![CDATA[ NOT LIKE CONCAT('%',LOWER(#{criterion.value}),'%') ]]>
            </when>
            <when test="criterion.op.type == 'isNull'">
                is null
            </when>
            <when test="criterion.op.type == 'isNotNull'">
                is not null
            </when>
            <when test="criterion.op.type == 'in'">
                in
                <foreach collection="criterion.value" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </when>
            <when test="criterion.op.type == 'notIn'">
                not in
                <foreach collection="criterion.value" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </when>
            <when test="criterion.op.type == 'between'">
                BETWEEN #{criterion.value} and #{criterion.secondValue}
            </when>
            <when test="criterion.op.type == 'notBetween'">
                NOT BETWEEN #{criterion.value} and #{criterion.secondValue}
            </when>
        </choose>
    </sql>

    <!--构造排序条件 -->
    <sql id="Wrapper_Order_Clause">
        <if test="wp.sorts != null">
            <foreach collection="wp.sorts" open=" order by " item="st" separator=",">
                <choose>
                    <when test="st.attr == 'ename'">
                        t.`ename` ${st.order.type}
                    </when>
                    <when test="st.attr == 'job'">
                        t.`job` ${st.order.type}
                    </when>
                    <when test="st.attr == 'sal'">
                        t.`sal` ${st.order.type}
                    </when>
                    <when test="st.attr == 'comm'">
                        t.`comm` ${st.order.type}
                    </when>
                </choose>
            </foreach>
        </if>
    </sql>

    <!--根据主键信息查询返回实体对象 -->
    <select id="findById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from `bonus` t
        where t.`ename` = #{ename,jdbcType=VARCHAR}
    </select>

    <!--根据实体对象信息查询返回实体对象 -->
    <select id="query" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from `bonus` t
        <include refid="Base_Where_Clause" />
    </select>

    <!--根据实体对象信息查询返回实体对象集合 -->
    <select id="findList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from `bonus` t
        <if test="_parameter != null">
            <include refid="Base_Where_Clause" />
        </if>
    </select>
    
    <!--根据主键信息删除实体对象 -->
    <delete id="deleteById" parameterType="java.io.Serializable">
        delete t from `bonus`
        where t.`ename` = #{ename,jdbcType=VARCHAR}
    </delete>
    
    <!--根据实体对象删除数据-->
    <delete id="delete" parameterType="org.jboot.generator.entity.BonusVO">
        delete t from `bonus` t
        <include refid="Base_Where_Clause" />
    </delete>

    <!--根据实体对象删除数据-->
    <delete id="deletes" parameterType="org.jboot.generator.entity.BonusVO">
        delete t from `bonus` t where t.`ename` in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.attrName}
        </foreach>
    </delete>

    <!--插入实体对象 -->
    <insert id="insert" parameterType="org.jboot.generator.entity.BonusVO">
        <selectKey order="BEFORE" resultType="java.lang.String" keyProperty="ename">
            select uuid() 
        </selectKey>
        insert into `bonus`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="ename != null">
                `ename`,
            </if>
            <if test="job != null">
                `job`,
            </if>
            <if test="sal != null">
                `sal`,
            </if>
            <if test="comm != null">
                `comm`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="ename != null">
                #{ename,jdbcType=VARCHAR},
            </if>
            <if test="job != null">
                #{job,jdbcType=VARCHAR},
            </if>
            <if test="sal != null">
                #{sal,jdbcType=DECIMAL},
            </if>
            <if test="comm != null">
                #{comm,jdbcType=DECIMAL},
            </if>
        </trim>
    </insert>

    <!--插入实体对象 -->
    <insert id="inserts" parameterType="org.jboot.generator.entity.BonusVO">
        insert into `bonus`
        <trim prefix="(" suffix=") values" suffixOverrides=",">
            `ename`,
            `job`,
            `sal`,
            `comm`
        </trim>
        <foreach collection="list" item="item" index="index" separator=",">
            (
            UUID(),
            #{item.job,jdbcType=VARCHAR},
            #{item.sal,jdbcType=DECIMAL},
            #{item.comm,jdbcType=DECIMAL}
            )
        </foreach>
    </insert>

    <!--更新实体对象 -->
    <update id="update">
        update `bonus` t
        <set>
            <if test="entity.job != null">
                t.`job` = #{entity.job,jdbcType=VARCHAR},
            </if>
            <if test="entity.sal != null">
                t.`sal` = #{entity.sal,jdbcType=DECIMAL},
            </if>
            <if test="entity.comm != null">
                t.`comm` = #{entity.comm,jdbcType=DECIMAL},
            </if>
        </set>
        where t.`ename` = #{entity.ename,jdbcType=VARCHAR}
    </update>

    <!--构造器查询 -->
    <select id="queryByWrapper" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from `bonus` t
        <if test="wp != null">
            <include refid="Wrapper_Where_Clause" />
        </if>
    </select>
    
    <!--构造器查询 -->
    <select id="findByWrapper" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from `bonus` t
        <if test="wp != null">
            <include refid="Wrapper_Where_Clause" />
            <include refid="Wrapper_Order_Clause" />
        </if>
    </select>

    <!--更新实体对象 -->
    <update id="updateByWrapper">
        update `bonus` t
        <set>
            <if test="entity.ename != null">
                t.`ename` = #{entity.ename,jdbcType=VARCHAR},
            </if>
            <if test="entity.job != null">
                t.`job` = #{entity.job,jdbcType=VARCHAR},
            </if>
            <if test="entity.sal != null">
                t.`sal` = #{entity.sal,jdbcType=DECIMAL},
            </if>
            <if test="entity.comm != null">
                t.`comm` = #{entity.comm,jdbcType=DECIMAL},
            </if>
        </set>
        <include refid="Wrapper_Where_Clause" />
    </update>
    
    <!--根据实体对象删除数据-->
    <delete id="deleteByWrapper">
        delete t from `bonus` t
        <include refid="Wrapper_Where_Clause" />
    </delete>

</mapper>