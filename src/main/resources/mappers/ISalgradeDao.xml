<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.jboot.generator.dao.ISalgradeDao">

    <!--基础字段返回信息配置 -->
    <resultMap id="BaseResultMap" type="org.jboot.generator.entity.SalgradeVO">
        <id column="grade" jdbcType="INTEGER" property="grade" />
        <result column="losal" jdbcType="INTEGER" property="losal" />
        <result column="hisal" jdbcType="INTEGER" property="hisal" />
    </resultMap>

    <!--基础字段信息配置 -->
    <sql id="Base_Column_List">
        `grade`,`losal`,`hisal`
    </sql>

    <!--基础条件查询配置 -->
    <sql id="Base_Where_Clause">
        <where>
            <if test="entity.grade != null">
                and `grade` = #{entity.grade,jdbcType=INTEGER}
            </if>
            <if test="entity.losal != null">
                and `losal` = #{entity.losal,jdbcType=INTEGER}
            </if>
            <if test="entity.hisal != null">
                and `hisal` = #{entity.hisal,jdbcType=INTEGER}
            </if>
        </where>
    </sql>

    <!--构造条件 -->
    <sql id="Wrapper_Where_Clause">
        <where>
            <foreach collection="wp.criterias" item="criteria" separator="or">
                <trim prefix="(" prefixOverrides="and" suffix=")">
                    <foreach collection="criteria.criterions" item="criterion">
                         <include refid="Wrapper_Where_Op_Clause"></include>
                    </foreach>
                </trim>
            </foreach>
        </where>
    </sql>

    <!--构造操作条件 -->
    <sql id="Wrapper_Where_Op_Clause">
        <choose>
            <when test="criterion.op.type == 'like' or criterion.op.type == 'notLike'">
                <choose>
                    <when test="criterion.attr == 'grade'">
                        and LOWER(`grade`)
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'losal'">
                        and LOWER(`losal`)
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'hisal'">
                        and LOWER(`hisal`)
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <otherwise>
                        and false
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <choose>
                    <when test="criterion.attr == 'grade'">
                        and `grade`
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'losal'">
                        and `losal`
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <when test="criterion.attr == 'hisal'">
                        and `hisal`
                        <include refid="Wrapper_Op_Clause" />
                    </when>
                    <otherwise>
                        and false
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </sql>

    <!--查询操作构造器 -->
    <sql id="Wrapper_Op_Clause">
        <choose>
            <when test="criterion.op.type == 'eq'">
                = #{criterion.value}
            </when>
            <when test="criterion.op.type == 'ne'">
                != #{criterion.value}
            </when>
            <when test="criterion.op.type == 'gt'">
                <![CDATA[ > #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'ge'">
                <![CDATA[ >= #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'lt'">
                <![CDATA[ < #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'le'">
                <![CDATA[ <= #{criterion.value} ]]>
            </when>
            <when test="criterion.op.type == 'like'">
                <![CDATA[ LIKE CONCAT('%',LOWER(#{criterion.value}),'%')]]>
            </when>
            <when test="criterion.op.type == 'notLike'">
                <![CDATA[ NOT LIKE CONCAT('%',LOWER(#{criterion.value}),'%') ]]>
            </when>
            <when test="criterion.op.type == 'in'">
                = #{criterion.value}
            </when>
            <when test="criterion.op.type == 'notIn'">
                = #{criterion.value}
            </when>
            <when test="criterion.op.type == 'in'">
                in
                <foreach collection="criterion.value" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </when>
            <when test="criterion.op.type == 'notIn'">
                not in
                <foreach collection="criterion.value" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </when>
            <when test="criterion.op.type == 'between'">
                BETWEEN #{criterion.value} and #{criterion.secondValue}
            </when>
            <when test="criterion.op.type == 'notBetween'">
                NOT BETWEEN #{criterion.value} and #{criterion.secondValue}
            </when>
        </choose>
    </sql>

    <!--构造排序条件 -->
    <sql id="Wrapper_Order_Clause">
        <if test="wp.sorts != null">
            <foreach collection="wp.sorts" item="st" separator=",">
                <choose>
                    <when test="st.attr == 'grade'">
                        `grade` #{st.order.type}
                    </when>
                    <when test="st.attr == 'losal'">
                        `losal` #{st.order.type}
                    </when>
                    <when test="st.attr == 'hisal'">
                        `hisal` #{st.order.type}
                    </when>
                </choose>
            </foreach>
        </if>
    </sql>

    <!--根据主键信息查询返回实体对象 -->
    <select id="findById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from salgrade
        where `grade` = #{grade,jdbcType=INTEGER}
    </select>

    <!--根据实体对象信息查询返回实体对象 -->
    <select id="query">
        select
        <include refid="Base_Column_List" />
        from salgrade
        <include refid="Base_Where_Clause" />
    </select>

    <!--根据实体对象信息查询返回实体对象集合 -->
    <select id="findList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from salgrade
        <if test="_parameter != null">
            <include refid="Base_Where_Clause" />
        </if>
    </select>
    
    <!--根据主键信息删除实体对象 -->
    <delete id="deleteById" parameterType="java.io.Serializable">
        delete from salgrade
        where `grade` = #{grade,jdbcType=INTEGER}
    </delete>
    
    <!--根据实体对象删除数据-->
    <delete id="delete" parameterType="org.jboot.generator.entity.SalgradeVO">
        delete from salgrade
        <include refid="Base_Where_Clause" />
    </delete>

    <!--根据实体对象删除数据-->
    <delete id="deletes" parameterType="org.jboot.generator.entity.SalgradeVO">
        delete from salgrade where `grade` in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.attrName}
        </foreach>
    </delete>

    <!--插入实体对象 -->
    <insert id="insert" parameterType="org.jboot.generator.entity.SalgradeVO">
        <selectKey order="BEFORE" resultType="java.lang.String" keyProperty="grade">
            select uuid() 
        </selectKey>
        insert into salgrade
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="grade != null">
                `grade`,
            </if>
            <if test="losal != null">
                `losal`,
            </if>
            <if test="hisal != null">
                `hisal`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="grade != null">
                #{grade,jdbcType=INTEGER},
            </if>
            <if test="losal != null">
                #{losal,jdbcType=INTEGER},
            </if>
            <if test="hisal != null">
                #{hisal,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <!--插入实体对象 -->
    <insert id="inserts" parameterType="org.jboot.generator.entity.SalgradeVO">
        insert into salgrade
        <trim prefix="(" suffix=") values" suffixOverrides=",">
            `grade`,
            `losal`,
            `hisal`
        </trim>
        <foreach collection="list" item="item" index="index" separator=",">
            (
            UUID(),
            #{losal,jdbcType=INTEGER},
            #{hisal,jdbcType=INTEGER}
            )
        </foreach>
    </insert>

    <!--更新实体对象 -->
    <update id="update">
        update salgrade
        <set>
            <if test="entity.losal != null">
                `losal` = #{entity.losal,jdbcType=INTEGER},
            </if>
            <if test="entity.hisal != null">
                `hisal` = #{entity.hisal,jdbcType=INTEGER},
            </if>
        </set>
        where `grade` = #{entity.grade,jdbcType=INTEGER}
    </update>

    <!--构造器查询 -->
    <select id="queryByWrapper" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from salgrade
        <if test="wp != null">
            <include refid="Wrapper_Where_Clause" />
        </if>
    </select>
    
    <!--构造器查询 -->
    <select id="findByWrapper" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from salgrade
        <if test="wp != null">
            <include refid="Wrapper_Where_Clause" />
            <include refid="Wrapper_Order_Clause" />
        </if>
    </select>

    <!--更新实体对象 -->
    <update id="updateByWrapper">
        update salgrade
        <set>
            <if test="entity.grade != null">
                `grade` = #{entity.grade,jdbcType=INTEGER},
            </if>
            <if test="entity.losal != null">
                `losal` = #{entity.losal,jdbcType=INTEGER},
            </if>
            <if test="entity.hisal != null">
                `hisal` = #{entity.hisal,jdbcType=INTEGER},
            </if>
        </set>
        <include refid="Wrapper_Where_Clause" />
    </update>
    
    <!--根据实体对象删除数据-->
    <delete id="deleteByWrapper">
        delete from salgrade
        <include refid="Wrapper_Where_Clause" />
    </delete>

</mapper>
